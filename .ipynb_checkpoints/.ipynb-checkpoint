{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dependencies\n",
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "target_url = \"https://marketcheck-prod.apigee.net/v1/popular/cars?api_key=3XhPmWArI3SYYbfFZpGuUFLEtVgEZvEn&state=GA&car_type=new\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "car_response = requests.get(f\"{target_url}\").json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(car_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'inventory_type': 'new', 'count': 1134, 'make': 'Ford', 'model': 'F-150', 'price_stats': {'geometric_mean': 42347, 'listings_count': 1046, 'min': 22184, 'median': 41563, 'population_standard_deviation': 10953, 'variance': 119966034, 'max': 109515, 'mean': 43600, 'trimmed_mean': 42495, 'standard_deviation': 10953, 'iqr': 13025}, 'miles_stats': {'geometric_mean': 17, 'listings_count': 142, 'min': 1, 'median': 10, 'population_standard_deviation': 1145, 'variance': 1311461, 'max': 7506, 'mean': 457, 'trimmed_mean': 162, 'standard_deviation': 1145, 'iqr': 28}, 'dom_stats': {'geometric_mean': 51, 'listings_count': 1134, 'min': 1, 'median': 64, 'population_standard_deviation': 97, 'variance': 9368, 'max': 703, 'mean': 96, 'trimmed_mean': 81, 'standard_deviation': 97, 'iqr': 116}}\n"
     ]
    }
   ],
   "source": [
    "print(car_response[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "   \"inventory_type\": \"new\",\n",
      "   \"count\": 1134,\n",
      "   \"make\": \"Ford\",\n",
      "   \"model\": \"F-150\",\n",
      "   \"price_stats\": {\n",
      "      \"geometric_mean\": 42347,\n",
      "      \"listings_count\": 1046,\n",
      "      \"min\": 22184,\n",
      "      \"median\": 41563,\n",
      "      \"population_standard_deviation\": 10953,\n",
      "      \"variance\": 119966034,\n",
      "      \"max\": 109515,\n",
      "      \"mean\": 43600,\n",
      "      \"trimmed_mean\": 42495,\n",
      "      \"standard_deviation\": 10953,\n",
      "      \"iqr\": 13025\n",
      "   },\n",
      "   \"miles_stats\": {\n",
      "      \"geometric_mean\": 17,\n",
      "      \"listings_count\": 142,\n",
      "      \"min\": 1,\n",
      "      \"median\": 10,\n",
      "      \"population_standard_deviation\": 1145,\n",
      "      \"variance\": 1311461,\n",
      "      \"max\": 7506,\n",
      "      \"mean\": 457,\n",
      "      \"trimmed_mean\": 162,\n",
      "      \"standard_deviation\": 1145,\n",
      "      \"iqr\": 28\n",
      "   },\n",
      "   \"dom_stats\": {\n",
      "      \"geometric_mean\": 51,\n",
      "      \"listings_count\": 1134,\n",
      "      \"min\": 1,\n",
      "      \"median\": 64,\n",
      "      \"population_standard_deviation\": 97,\n",
      "      \"variance\": 9368,\n",
      "      \"max\": 703,\n",
      "      \"mean\": 96,\n",
      "      \"trimmed_mean\": 81,\n",
      "      \"standard_deviation\": 97,\n",
      "      \"iqr\": 116\n",
      "   }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(json.dumps(car_response[0],indent=3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#List of Car Make, model, MakeModel\n",
    "car_make=[]\n",
    "car_Model=[]\n",
    "car_makeModel = []\n",
    "\n",
    "#List of Car Make Counts\n",
    "car_Sales = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ford', 'Chevrolet', 'Toyota', 'Ram', 'Toyota', 'Toyota', 'GMC', 'Toyota', 'Toyota', 'Ford', 'Chevrolet', 'Honda', 'Chevrolet', 'Chevrolet', 'Jeep', 'Jeep', 'Nissan', 'Jeep', 'Honda', 'Nissan', 'Jeep', 'Chevrolet', 'Chevrolet', 'Lexus', 'Kia', 'Ford', 'Buick', 'Ford', 'Ram', 'Kia', 'Dodge', 'Ford', 'Chevrolet', 'Volkswagen', 'Kia', 'Honda', 'Hyundai', 'GMC', 'Volkswagen', 'Chevrolet', 'GMC', 'Toyota', 'Honda', 'Nissan', 'Kia', 'Toyota', 'Ford', 'Kia', 'Jeep', 'Dodge']\n",
      "['F-150', 'Silverado', 'Camry', '1500', 'Corolla', 'RAV4', 'Sierra', 'Tacoma', 'Highlander', 'Explorer', 'Silverado 1500', 'CR-V', 'Colorado', 'Equinox', 'Cherokee', 'Renegade', 'Altima', 'Wrangler', 'Accord', 'Rogue', 'Grand Cherokee', 'Blazer', 'Traverse', 'RX', 'Sorento', 'Superduty', 'Encore', 'Ranger', '2500', 'Soul', 'Journey', 'Escape', 'Tahoe', 'Jetta', 'Forte', 'Civic', 'Elantra', 'Acadia', 'Atlas', 'Malibu', 'Sierra 1500', '4-Runner', 'Pilot', 'Versa', 'Sportage', 'Tundra', 'Edge', 'Optima', 'Compass', 'Challenger']\n",
      "[1134, 799, 652, 601, 532, 490, 459, 372, 323, 319, 318, 305, 283, 282, 272, 271, 270, 270, 262, 261, 255, 218, 213, 210, 210, 209, 204, 198, 193, 192, 186, 186, 184, 178, 175, 171, 170, 169, 167, 163, 162, 160, 159, 153, 151, 149, 149, 144, 144, 142]\n"
     ]
    }
   ],
   "source": [
    "#car_makeModel.append(car[\"make\"]+\"-\"+car[\"model\"])\n",
    "for car in car_response:\n",
    "    car_make.append(car[\"make\"])\n",
    "    car_Model.append(car[\"model\"])\n",
    "    car_Sales.append(car[\"count\"])\n",
    "    \n",
    "print(car_make)\n",
    "print(car_Model)\n",
    "#print(car_makeModel)\n",
    "\n",
    "print(car_Sales)\n",
    "\n",
    "\n",
    "#type(car_makeModel)\n",
    "#type(car_Sales)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "carSales_df = pd.DataFrame({\n",
    "                            #\"MakeModel\": car_makeModel,\n",
    "                            \"Make\":car_make,\n",
    "                            \"Model\":car_Model,\n",
    "                            \"Sales\": car_Sales})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "topCarSalesbyModel_df = carSales_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Ford</td>\n",
       "      <td>F-150</td>\n",
       "      <td>1134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Silverado</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Toyota</td>\n",
       "      <td>Camry</td>\n",
       "      <td>652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Ram</td>\n",
       "      <td>1500</td>\n",
       "      <td>601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Toyota</td>\n",
       "      <td>Corolla</td>\n",
       "      <td>532</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Make      Model  Sales\n",
       "0       Ford      F-150   1134\n",
       "1  Chevrolet  Silverado    799\n",
       "2     Toyota      Camry    652\n",
       "3        Ram       1500    601\n",
       "4     Toyota    Corolla    532"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "topCarSalesbyModel_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "\n",
    "# create a list of numbers for x values\n",
    "tick_locations = np.arange(len(topCarSalesbyModel_df))\n",
    "\n",
    "# create bar chart and set the values of xticks\n",
    "plt.bar(tick_locations, topCarSalesbyModel_df['Sales'], align=\"center\")\n",
    "plt.xticks(tick_locations, topCarSalesbyModel_df['Model'], rotation=45, ha=\"right\")\n",
    "\n",
    "plt.title(\"Top 5 Car Sales in Georgia by Model\")\n",
    "plt.ylabel(\"Total Sales\")\n",
    "plt.xlabel(\"Car Models\")\n",
    "\n",
    "plt.savefig(\"Top5CarSalesByModel.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#byMake_df = carSales_df[[\"Make\",\"Sales\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CarSalesbyMake_Slice = carSales_df.groupby(['Make']).agg(\n",
    "#     {\n",
    "#         'Sales': \"sum\"\n",
    "#     }\n",
    "# )\n",
    "CarSalesbyMake_df = pd.DataFrame({\n",
    "                            #\"MakeModel\": car_makeModel,\n",
    "                            \"Make\":car_make,\n",
    "                            \"Sales\": car_Sales\n",
    "                            })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50 entries, 0 to 49\n",
      "Data columns (total 2 columns):\n",
      "Make     50 non-null object\n",
      "Sales    50 non-null int64\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 928.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "CarSalesbyMake_df.info()\n",
    "\n",
    "#CarSalesbyMake_Slice[\"Make\"] = byMake_df[\"Make\"]\n",
    "\n",
    "#CarSalesbyMake_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converted to a Series\n",
    "GeorgiaMakeSales = CarSalesbyMake_df.groupby(['Make']).sum()[\"Sales\"]\n",
    "\n",
    "# .agg(\n",
    "#     {\n",
    "#         'Sales': \"sum\"\n",
    "#     }\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(GeorgiaMakeSales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "Georgia_df = pd.DataFrame({\"Sales\": GeorgiaMakeSales})\n",
    "#(data=GeorgiaMakeSales.index, columns=['Make'], ['Sales'])\n",
    "\n",
    "#df = pd.merge(df1, df2, left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Make</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Buick</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>2460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Dodge</td>\n",
       "      <td>328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ford</td>\n",
       "      <td>2195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>GMC</td>\n",
       "      <td>790</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Sales\n",
       "Make            \n",
       "Buick        204\n",
       "Chevrolet   2460\n",
       "Dodge        328\n",
       "Ford        2195\n",
       "GMC          790"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Georgia_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "SortedGeorgia_df = Georgia_df.sort_values(by=['Sales'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "top5CarSalesbyMake_df = SortedGeorgia_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Make'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda2/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2896\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2897\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Make'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-bf36ca7efbaf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# create bar chart and set the values of xticks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtick_locations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop5CarSalesbyMake_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sales'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malign\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"center\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtick_locations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop5CarSalesbyMake_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Make'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m45\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Top 5 Car Sales in Georgia by Make\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda2/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2978\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2979\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2980\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2981\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2982\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda2/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2899\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2900\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2901\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Make'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "\n",
    "# create a list of numbers for x values\n",
    "tick_locations = np.arange(len(top5CarSalesbyMake_df))\n",
    "\n",
    "# create bar chart and set the values of xticks\n",
    "plt.bar(tick_locations, top5CarSalesbyMake_df['Sales'], align=\"center\")\n",
    "plt.xticks(tick_locations, top5CarSalesbyMake_df['Make'], rotation=45, ha=\"right\")\n",
    "\n",
    "plt.title(\"Top 5 Car Sales in Georgia by Make\")\n",
    "plt.ylabel(\"Total Sales\")\n",
    "plt.xlabel(\"Manufacturer\")\n",
    "\n",
    "plt.savefig(\"Top5CarSalesByMake.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
